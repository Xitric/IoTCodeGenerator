/*
 * generated by Xtext 2.20.0
 */
package org.iot.codegenerator.validation

import com.google.inject.Inject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.iot.codegenerator.codeGenerator.And
import org.iot.codegenerator.codeGenerator.CodeGeneratorPackage
import org.iot.codegenerator.codeGenerator.Conditional
import org.iot.codegenerator.codeGenerator.DeviceConf
import org.iot.codegenerator.codeGenerator.Or
import org.iot.codegenerator.typing.TypeChecker

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CodeGeneratorValidator extends AbstractCodeGeneratorValidator {
	
	@Inject
	extension TypeChecker 
	
	@Check
	def checkDeviceConfiguration(DeviceConf configuration) {
		val boards = configuration.board
		
		if (boards.size() < 1){
			warning('''there should be a board definition''', CodeGeneratorPackage.eINSTANCE.deviceConf_Board)
			return
		}else if (boards.size() > 1){
			error('''there must be exactly 1 board definition''', CodeGeneratorPackage.eINSTANCE.deviceConf_Board)
			return
		}
		
		val clouds = configuration.cloud
		
		if (clouds.size() < 1){
			warning('''there should be a cloud definition''', CodeGeneratorPackage.eINSTANCE.deviceConf_Cloud)
			return
		} else if (clouds.size() > 1){
			error('''there must be exactly 1 cloud definition''', CodeGeneratorPackage.eINSTANCE.deviceConf_Cloud)
			return
		}
		
		val fogs = configuration.fog
		
		if (fogs.size() > 1){
			error('''there must at maximum be 1 fog definition''', CodeGeneratorPackage.eINSTANCE.deviceConf_Fog)
			return
		}		
	}
	
	def validateTypes(TypeChecker.Type actual, TypeChecker.Type expected, EStructuralFeature error){
		if (expected != actual) {
			error('''expected «expected» got «actual»''', error)
		}
	}
	
	@Check
	def checkExpression(Conditional conditional){
		conditional.condition.type.validateTypes(TypeChecker.Type.BOOLEAN, CodeGeneratorPackage.Literals.CONDITIONAL__CONDITION)
		conditional.incorrect.type.validateTypes(conditional.correct.type, CodeGeneratorPackage.Literals.CONDITIONAL__INCORRECT)
	}
	
	@Check
	def checkExpression(Or or){
		or.left.type.validateTypes(TypeChecker.Type.BOOLEAN, CodeGeneratorPackage.Literals.OR__LEFT)
		or.right.type.validateTypes(TypeChecker.Type.BOOLEAN, CodeGeneratorPackage.Literals.OR__RIGHT)
	}
	
	@Check
	def checkExpression(And and){
		and.left.type.validateTypes(TypeChecker.Type.BOOLEAN, CodeGeneratorPackage.Literals.AND__LEFT)
		and.right.type.validateTypes(TypeChecker.Type.BOOLEAN, CodeGeneratorPackage.Literals.AND__RIGHT)
	}
	
	
	
	
	
}
