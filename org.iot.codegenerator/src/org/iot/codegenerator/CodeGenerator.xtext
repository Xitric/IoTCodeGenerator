grammar org.iot.codegenerator.CodeGenerator with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate codeGenerator "http://www.iot.org/codegenerator/CodeGenerator"

DeviceConf:
	(channels+=Channel | board=Board | fog=Fog | cloud=Cloud)*
;

Channel:
	'channel' name=ID
;

Board:
	'board' name=ID BEGIN
		BoardIn sensors+=(ExtSensor | OnbSensor)+
	END
;

BoardIn:
	'in' input=[Channel]
;

ExtSensor returns Sensor:
	{ExtSensor} 'extsensor' name=ID BEGIN
		sampler=Sampler datas+=Data+
	END
;

OnbSensor returns Sensor:
	{OnbSensor} 'onbsensor' name=ID BEGIN
		sampler=Sampler datas+=Data+
	END
;

Sampler:
	'sample' ({FrequencySampler} 'frequency' delay=INT | {SignalSampler} 'signal')
;

Data:
	'data' entities+=DataID (',' entities+=DataID)* BEGIN
		input = (I2C | PIN) 
		outputs += OUT+
	END
;

DataID:
	name=ID
;

Source:
	I2C|PIN
;

I2C:
	'i2c' '(' address=HEX ')' 'as' name=ID vars=VARS 
;

PIN:
	'pin' '('ids+=INT (',' ids+=INT)* ')' 'as' name=ID vars=VARS
;

VARS:
	'(' ids+=VarID (',' ids+=VarID)* ')'
;

VarID:
	name=ID
;

OUT:
	'out' channel=[Channel] dataId=[DataID] source=[Source] pipeline=Pipeline
;

Pipeline:
	'.' (TuplePipeline | WindowPipeline) (next=Pipeline)?
	
;

TuplePipeline:
	({Filter} 'filter' | {Map} 'map' | {Abs} 'abs') '['expression=Expression']'
;


WindowPipeline:
	'byWindow['width=INT']' '.' executePipeline=ExecutePipeline
;

ExecutePipeline:
    {Reduce} 'reduce' |
    {Mean} 'mean' |
    {Median} 'median' |
    {Mode} 'mode' |
    {Var} 'var' |
    {StDev} 'stdev' |
    {Min} 'min' |
    {Max} 'max' |
    {Count} 'count'
;

Expression:
	Or
;


Or returns Expression:
	And ({Or.left=current} '||' right=Or)?
;

And returns Expression:
	Equality ({And.left=current} '&&' right=And)?
;

Equality returns Expression:
	Comparison ({Equal.left=current} '==' right=Comparison | {Unequal.left = current} '!=' right=Comparison)*
;

Comparison returns Expression:
	SubAdd ({LessThan.left=current} '<' right=SubAdd | {LessThanEqual.left=current} '<=' right=SubAdd | {GreaterThan.left=current} '>' right=SubAdd | {GreaterThanEqual.left=current} '>=' right=SubAdd)*
;


Not returns Expression:
	{Not} '!' value=Primary | Primary
;


SubAdd returns Expression:
	MulDiv ({Plus.left=current} '+' right=MulDiv | {Minus.left=current} '-' right=MulDiv)*
;

Primary returns Expression:
	'('Expression')' | NumberLiteral | varid=[VarID] | BooleanLiteral
;

NumberLiteral:
	value=NUMBER
;

BooleanLiteral:
	value=BOOLEAN
;


MulDiv returns Expression:
	Negation ({Mul.left=current} '*' right=Negation | {Div.left=current} '/' right=Negation)*
;

Negation returns Expression:
    {Negation} '-' value=Exponent | Exponent
;

// Exponentiation is right-associative!
// That is why the rule refers to itself (or its parent) on the right of the operator
Exponent returns Expression:
    Not ({Exponent.base=current} '**' power=Negation)?
;

Fog:
	'fog' BEGIN
		transformations+=Transformation+ 
	END
;

Cloud:
	'cloud' BEGIN
		transformations+=Transformation+ 
	END
;

Transformation:
	'transformation' entities+=DataID (',' entities+=DataID)* BEGIN
	input=TransformationIn outputs+=OutBody+
	END
;

TransformationIn:
	'in' entities=DataID 'as' name=ID vars=VARS
;

OutBody: 
	'out' entities=[DataID] source=[TransformationIn] pipeline=Pipeline
;


terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override 
terminal INT returns ecore::EInt:
	'0' | ('1'..'9')('0'..'9')*
;
terminal HEX:
	'0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+
;
terminal DBL returns ecore::EDouble:
	INT? '.'('0'..'9')+
;
terminal SCI returns ecore::EDouble:
	(INT | DBL) ('e' | 'E') '-'? INT
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

NUMBER hidden():
	INT | HEX | DBL | SCI
;
