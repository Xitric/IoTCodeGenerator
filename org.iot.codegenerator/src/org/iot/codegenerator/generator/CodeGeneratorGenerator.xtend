/*
 * generated by Xtext 2.20.0
 */
package org.iot.codegenerator.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.iot.codegenerator.codeGenerator.Channel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CodeGeneratorGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("config.json", resource.allContents.toIterable.filter(Channel).compile)
	}

	def String compile(Iterable<Channel> channels){ 
		val channelFormat = '": {\n        "type": "",\n        "lane": ""\n    }'
		var compiled = '{\n    "wifi": {\n        "ssid": "",\n        "password": "",\n        "cloud": ""\n    },\n    "serial": {\n        "baud": "",\n        "databits": "",\n        "paritybits": "",\n        "stopbit": ""\n    },\n'
		for (channel : channels) {
		    compiled += '    "'+channel.name+channelFormat+',\n'
		}
		compiled.substring(0, compiled.length-2)+'\n}\n'
	}	
}
