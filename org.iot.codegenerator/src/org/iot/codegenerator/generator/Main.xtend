/*
 * generated by Xtext 2.20.0
 */
package org.iot.codegenerator.generator

import com.google.inject.Inject
import com.google.inject.Provider
import java.net.ServerSocket
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.diagnostics.Severity
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.GeneratorDelegate
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import org.iot.codegenerator.CodeGeneratorStandaloneSetup

class Main {

	def static main(String[] args) {
		if (args.empty) {
			System::err.println('Aborting: no path to EMF resource provided!')
			return
		}
		val injector = new CodeGeneratorStandaloneSetup().createInjectorAndDoEMFRegistration
		val main = injector.getInstance(Main)
		main.runGenerator(args.get(0))
	}

	@Inject Provider<ResourceSet> resourceSetProvider

	@Inject IResourceValidator validator

	@Inject GeneratorDelegate generator

	@Inject JavaIoFileSystemAccess fileAccess

	def protected runGenerator(String string) {
		try {
			val sock = new ServerSocket(4000)
			val conn = sock.accept()
			
			var read = 0
			while (read === 0) {
				read = conn.inputStream.read()
				System.out.println(read)
				if (read === 0) {
					conn.outputStream.write(doGenerate(string))
				}
			}
		} catch (Throwable t) {
			t.printStackTrace;		
		} finally {
			System.out.println("Goodbye");
		}
	}
	
	def private int doGenerate(String string) {
		// Load the resource
		val set = resourceSetProvider.get
		val resource = set.getResource(URI.createFileURI(string), true)

		// Validate the resource
		val issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		if (!issues.empty) {
//			issues.filter[severity == Severity.ERROR].forEach[System.err.println(it)]
			if (issues.exists[severity == Severity.ERROR]) {
				return 1
			}
		}

		// Configure and start the generator
		fileAccess.outputPath = 'src-gen/'
		val context = new GeneratorContext => [
			cancelIndicator = CancelIndicator.NullImpl
		]
		generator.generate(resource, fileAccess, context)
		System.out.println('Code generation finished.')
		return 0
	}
}
