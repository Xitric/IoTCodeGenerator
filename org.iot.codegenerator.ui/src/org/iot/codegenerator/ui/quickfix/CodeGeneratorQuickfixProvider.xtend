/*
 * generated by Xtext 2.20.0
 */
package org.iot.codegenerator.ui.quickfix

import java.util.regex.Pattern
import org.eclipse.xtext.ui.editor.model.IXtextDocument
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.iot.codegenerator.codeGenerator.Data
import org.iot.codegenerator.validation.CodeGeneratorValidator

import static extension org.eclipse.xtext.EcoreUtil2.*
import org.iot.codegenerator.codeGenerator.CodeGeneratorFactory
import org.iot.codegenerator.codeGenerator.DataID
import org.iot.codegenerator.codeGenerator.DeviceConf
import org.iot.codegenerator.codeGenerator.Cloud
import org.iot.codegenerator.codeGenerator.TransformationIn

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class CodeGeneratorQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(CodeGeneratorValidator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
	@Fix(CodeGeneratorValidator.INCORRECT_INPUT_TYPE_PIN)
	def void changeInputTypeToI2c(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Change input type to i2c",
			"Onboard sensors communicate using the I2C bus, so you should change input type from pin to i2c",
			null, [ context |
				context.xtextDocument.replaceInputType(issue, "i2c")
				context.xtextDocument.positionCategories
			])
	}

	@Fix(CodeGeneratorValidator.INCORRECT_INPUT_TYPE_I2C)
	def void changeInputTypeToPin(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Change input type to pin",
			"External sensors communicate using IO pins, so you should change input type from i2c to pin",
			null, [ context |
				context.xtextDocument.replaceInputType(issue, "pin")
			])
	}

	@Fix(CodeGeneratorValidator.UNUSED_VARIABLE)
	def void insertUsageOfVariable(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Use the variable as output",
			"The variable is not used as output, please consider using the variable", null, [ element, context |
				val data = element.eContainer.getContainerOfType(Data)
				val channel2 = element.getContainerOfType(DeviceConf).channels.last
				val source2 = data.input
				data.outputs.add(CodeGeneratorFactory.eINSTANCE.createDataOut() => [
					channel = channel2
					dataId = element as DataID
					source = source2
				])
			])
	}
	
	@Fix(CodeGeneratorValidator.UNUSED_VARIABLE)
	def void insertUsageOfVariableCloud(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Use the variable as output on cloud",
			"The variable is not used as output, please consider using the variable", null, [ element, context |
				val cloud = element.eContainer.getContainerOfType(DeviceConf).cloud.last
				val data = cloud.transformations.last
				val transIN = data.input as TransformationIn
	
				data.outputs.add(CodeGeneratorFactory.eINSTANCE.createTransformationOut() => [
					entities = element as DataID
					source = transIN
					 
					
				])
			])
	}
	
	@Fix(CodeGeneratorValidator.UNUSED_VARIABLE)
	def void insertUsageOfVariableFog(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Use the variable as output on fog",
			"The variable is not used as output, please consider using the variable", null, [ element, context |
				val data = element.eContainer.getContainerOfType(Data)
				val channel2 = element.getContainerOfType(DeviceConf).channels.last
				val source2 = data.input
				data.outputs.add(CodeGeneratorFactory.eINSTANCE.createDataOut() => [
					channel = channel2
					dataId = element as DataID
					source = source2
				])
			])
	}

	/**
	 * Replaces an occurence of an incorrect input type such as
	 * {@code i2c (0x23) as x(a,b)} with the correct alternative such as
	 * {@code pin () as x(a,b)}.
	 */
	private def void replaceInputType(IXtextDocument document, Issue issue, String inputType) {
		val issueText = document.get(issue.offset, issue.length)
		val pattern = Pattern.compile("([\\w]+)\\(([\\w,]*)\\)")

		val matcher = pattern.matcher(issueText)
		if (matcher.find() && matcher.groupCount === 2) {
			val input = matcher.group(1)
			val ids = matcher.group(2).split(",")

			document.replace(issue.offset,
				issue.length, '''«inputType» () as «input»(«FOR id : ids SEPARATOR ","»«id»«ENDFOR»)''')
		} else {
			document.replace(issue.offset, issue.length, '''«inputType» () as x()''')
		}
	}
}
